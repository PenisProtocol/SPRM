// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import {Sprm} from "../src/Sprm.sol";

/**
 * @title SprmUsage2
 *
 * This contract describes how to use Sprm contract.
 */
contract SprmUsage2 is Script {
    Sprm public hasher;
    bytes32 public hash;

    function setUp() public {}

    function run() public {
        vm.startBroadcast();

        // Okay, let's learn how to use Sprm contract.

        // First, we need to create a new instance of Sprm contract.
        hasher = new Sprm();

        // Now, we can call the pad function.
        bytes
            memory input = hex"1513151f22202223272827282b2a272621415150504f4c4847454341386c7570716f796c6258735d46504a3767837e85878883888b8d8f8d8a8e959492808c903d3e41373444424444444444444444433c2b272726252120211f1e1d155f766f706f786b5e5a7246303a33324f5f5f61626466696c6e71727377797a7b7578782e3034312d3b3c3c3b3c3e3e43403e4140282726221e1e1d1e1f1d191056766d6d6e786d575c693b3b4035476c6d706c6b6e7371716c746e7270717b776574713a3d3f452c3e44464849494a4b4a4a4a4b324b49454241403f3d39351e51746a696e776d4f60542b40412936726f726d6f80797b737a837c77748893766d8b8137393c3e39323f40434443444346474646313a3d3c38373833322d2b1046685c5f687069455938192b2e264777757376747d7c7c7b80817a797880795d7b83862e2f3437352c3535393c3b393c3b3f3e412c373d3d3b383734322f2e16222a28282d3133252d1a1a1e1d2f6478757173847c747580887f767b8a6d5a5a7d81811418191c1d1f1c1f20212222232422222421364543413f3e3935333219111015100e111212110f2d403537647a746f7883787f8187827e798e846f5f7a878a783939393c403d35474544444546474545453e282625262525211d1d1e12090a0b0b0c0b09090c0c323e323b6e79738087817b838188847f83928a746a8b86857f393b3c3d3c3d324345424648484a474645422a31312e2b2a282424231209090a0b0c0c0c0b0a1238413348757c7a77877c7c818d84847582939364838b897e7b393d3f3e3e41383f4647494848474545454633454543413e3c3a3a3a1808090c0c0e0e0f0d0c18414130587d7c7b7a897e7e7c8e87847b8d937c578f8c8a8286383b3d3b3a3c3f3747494c4c4a4848484749354144403e3c3b3939381807090c0c0e0f0f0d0d214440274f81757b887f757687878183888f926763787779717115181a1a1b1e1f254148494a4947484443473b363f403f3b3836353719070a0c0c0e0f0f0e0f2029273465807b7e867d7c838d87837d8a8f86544d4d4c4a3a442d3235474b383e382226292b2a2a29262526242c3c3a383233302e2f1603070a0a0b0e100f0e28362a396e78797d807e7e848584797c84855a35383a38374147393c47a8a64f4e524b4c4c4b4a474343403e3d48514c433d3b3f494d382e2d2c2919110c0a0b354f464a5150525254575a5d5c57555252524b474747494b57534a536298a6b481676b7477767472727172706f6f6b6b738396a5aeada9aaa7a6a79e907a593f47696b686e73757b7a7f81827f8286807f7c807c79777573736e525b61728ab9d2bf937773747a7d7d7a7573747c92afb8b6b5b5b4b4b4b5b6b6b5b6b6b7b8b4a28b74707c81818888858b90929090918e8b8a877b76767978785a606f76717590bad6cda47c71717575716f9abbbdbcb9b7b4b1aeaaaaa8a9aaaaacaeb1b4b9bdbdb2947e858c8d8e8c8b97999a989899979999908b888985825c67757577736f738cb4d6dac3a7907e75aac4bdbab5afaba8a7a7a9aaaeadb0b0a8a4a6aaaeb5bcbfbfb1898d9292919396989b9d9c9e9fa0a19e99968f908f6072777777797776747789a8c8dbe2ddd8decebdafabababaeaeb1b3b5b0aca2bbb3b2ada7a9abb1b9c0c2b67e898d8b8f8f94989b999b9b9c9d9e9a958f8b8e7580807f7e7c7d81817f7d7b8397b4cbd8e3e5d0b5aeb6bab2afbfbdb9c5b593a2a1aaacb2aeb4afb0b7c2c6a7859d999d9e9fa0a2a2a3a1a0a1a3a3a4a19d9b88888685878482878883858885858094c2c9d1d2d1c5ad96c4dad69075b5bb7a91b4b9b8b4a3bbbab5b2bbc7be82a99f9fa6a7a8a8a7a9aaabacacadaca8a7a58a888c8b8c8c898b8d8b8b90888b8293b6c4c7cad3d2a4b9ddda9b645b60817ebed6e1e1deb9b7b8a2bbb5c4c9868d8f8d908f8a8e95989a9d9f9e9d938d8c8e8f91929091909091929191908b8d9382beaac6c5cbd3c6afb5a67070716e787da4cdc4c0c8dfe0c492bebbc5c27c8a8d918d90949696928e92979897928e8e8d9190909191919397979999949693978694a38dc4bdc3c8b8a4bbc0bfbdc1b37580c0d1c9c4bbb5acbfc2bccc93879a9c9fa0a2a5a2a6a8a5a5a5a2a29f9e9ea08787888a8c8b8c8d8c8d898a8e8c898873836785b0a2b7be928ba5a0bccfb06063afccc1b9b2a2a8c0b4c69f899b9ea4a6a7a7a7b6aeaaaaa8a8a8a8a5a19f9e8a888b8a8b8c8f8f9095908889888380817169587fbdc4c6c3bbbcaca9a5bd97b1e0dad5c6c2aabab89585889a969aa0a2a3a5a4b3cba1a3a3a4a3a5a5a29c9a9291919491939595979c978f91928c8c8f926a4c5f92aec1c9bcbdc5c3c5c0b3b8c1d1d1c3a192a17a6a617f908e9194999d9e9e9dc9ad999d9d9e9d9d9d9c98a0a2a1a1a0a1a0a1a2a092877c706e6a6c72685e56484562738aa9aeb8c3bdc2bba89c9275675a545e6561688d8f8e939d9f9d9e99add2cba6a3a3a2a2a2a2a2a0a3a29c989796968c855e534e4a4a4949494d515a615d57482c313d474c52504e474240424846546669777fa3b9bec0c2c2c4c2c4c1d5dcd0acb0b4b6b3adaba3a2969e9c846a5d55504d51575f64686b6d68625a514f56655f34202c2f2f2d2c31393e40414c6c888eaec2b8a7978e8a887e7a8b8992d5e0c2b0b3b5b6b2ada5a192887159514f556372828b8f8f8f909793908d867a66555b684b232325262a333e37373e465e8cc6b4968e8b90917f7570958f5a5cb7d7e7cec2abb0b1aba7a07d665a535b6e859294908d8a8687888b89888e919192866b5a694c1d20242b302c2934363a71c89f8f937d959d989f76618ca76b5478d4daaab8d5bbb0b49a6b6658586e9198958f8a8b8f938f83817e7b858c958b8e97927d616c370e181e242c2f30324ec3a89da28884b7afa28a6448507a5d5453aad9d0829fd8c9ae66665b617e979b928b919591807173626565636b6a7e85949e9c9a846363262528292d2f313888c6a1ac94a0aca6949cac9f866557585f5a62d3dbb88595d3cd6d5f64899f978e9197887667656a63595b615d554e545f6c86a0a29e7b72452d34383f46504db5b09ea0b3b1746c7d8dadada49c67565f4b48add8de9d9099d76a6789a39c949d9c7c6a6b6e716c5d595d51515756515a606d839aa7977d511a23333b3c414fc0bbaa9fb0ab9b918064849db5ae8534424e5181d5daca9597a26481a6a39da691716a757d87887659718083979c9e966b536d6b7e9ea47d5c4148484f5f6b6fbbcba7afa69ea79a7463655d687b7a6162605e78b6d6e4ae9a9c789daca6a99773727c7f7f958671686986857b969ea17150666c7188a68476747c83848485789fc087b793888d7f61443938547a897a5d3f49708dd0d8dba2a38baeb1b3a87c828383807d655b5b5c51556d8ca2a2785a65697976788f7b6b6c6e747175737379cd9f98aba4934e324a586b8a979f584638344f75b4d3e4c3a497b3b6ba977984878d7c7e77585c5e59565f5c636a6367787e7975777a707f7f7e786f8081735d98dbaebbbfa67c5a564d7498a384433d37343159a5d3d6e5ada0bcbabb908195a8ae8e8185777c6e646760565e6d757a7b7c7a7c7f7a5f7b888784798387764c70a9dac5c6997a675f5661939d8c62524a3745618bbed5e1d59ebcbebe8488b8b8a58b7f8a8d847e837775656b748a87757e828a7c704b579390888c95a27b3d6177a7dbbf6a58595570767a928f81705e4f6a92aeabc7d2ea89b8c0b98897a1968183838791868083858a797881887f7f838481706c4b5a9ea8a4a29a9c7340446b7994d3a9838c839394757e767377695681999e95b1d2d86095c3c39586887d7f8582827e828e928581888185868386857a6f75504d5392a39f9d99978244413f6c7f85b3cdc3b5a9a69ca9a18d9094949fb0b49eadc9cf71618dc0a87f887f7c80867d7c778d86797980778f9696846968725951636099a4a5a7a3948b553a3f3857817c82a7c8d0c9b8a9abaea4aa96b0cddbe1d4b0d2ad875b6d98949594838c8f7f78787a7975738d818e886b5c646c5a4e5e717aa7a7adaca3978f804c4846343e5f74797d8ca5bcc9ced2d3d2d1d8d4c4ac99a7c6aeb09c6d5e6b7985878781807d7a8185858988735b4f575d5a474b5b5e6e8fb1adafafa9a4958f7e504f4d3f333950667174767a8184898d8984858b949aacb3a0a2aa99846f605c66656f736f6b66655d534c4b4b4d4f4b40454f56596aa3ada9a6aaa89f9692977b5353514a3d363137424f565b5b5d5e677b8a8e8fa1acaaa3a3a69d90908f8271686364615c58544f4f4a433e3f40424c595e5d6197c0b2b0aeababa8978f9296845c5158574c4241434a4a4f59595e75848a8c91aaa9a8a0a1a3a28d8e9093917264696458504c453d3b3d383a42484f56625e7bb7b5aeaaaea9a8aba3958e8f8e8a705c5a5e544e4b555a5c61616f8281878e8fa7abaaa5a4a7a9a394989c998f5a40454744403f3e3f46484a556164676984bdbdb8b3abadb5b5b2a99f9c989899968a786558574d4e5861626260718a918c909bacaca5abaeb1b8aca7a9a1a2986a4a4c514f50505050575b5f63606391c6c6c0bbb5b3b7b2acaaa59e9fa0999895919290867e7472808884787e8da1a68f959bafb2a0a3a8acb1b4ab9f96978d89785a49494d4d51535754535474abd1d9cdc5c3bcb6b7ada9aca6a19d9ea2a1a0a5a7acaca6a4a09e9fa0959595a1a59d9595a4aeabaeb3b3bdc3cbbbb5aea8a49e9780685b5c5c5c575e76a3c4d2dfdbc8c3c2c4beb9b5b3b2ada9aca8a6a5a7a9b0b6b3adaaa6a4a7a49e979aa0a8a99a98a2b799a3a1a0a0a2b0ada9ab9f96918a87897f7b7378899eb5b3aeb2c3c5bab3a9b2afaca8a4a5a3a8a8a7a3a1a1a1aab2ada9aaa09fa29d9b94989b9ea39a9398a89a939ea5a09b9ea3a2aca8acaeaaa4a9abaaacaeb1afa8aeb1abc0d2c5c4bfb8b0b5b2acabaaa9a5a3a0989a98a4a99e9da19b99a0a09b9597999da7a79597a0a4a6a9aeaeaaacaeb5b3b3b2b5b2b0b3b4b1b1b4b6b7b8babcc0d0c4c8c2b9b8b3b6afabada6a2a1a09d9a9e9d9f9f91949490888a89857d74747371715f5c5ba0a3a6a4a4a5a9a3a29fa1a1a1a2a0999b999b96949392909396938d8583807c776f706d6d6e6a665d5b5f5d5d5b56514c474442403e3b3734333231303031325e5c5a5a5c61656465666565656565636362605d595655564b3737404134364f505151504e4a4742403e40473f403e2f2d362c272624201a181819171a1613123f4142454b575f5e5e5f5f5f606161605e5a5857534d494c4235284348433e41423c3b3c3d3e3e40424341673f36361c101f0e08070806070a0c0c0d0f0b0508161513100c244e4a4a4c4b49494a44413f3630373f3a3d353734173d40423f443f3a383a3f414244464446816a383a34100a0a080907060b0e0f100f0e0c0a0d050505050137525050524e4e504e49453b3a35334445433b38351a433f3d434a403c39383d3e3e4349426d8b8b4b343b18070a0a0c0c0a0c0c0c0c0c0b0b0a0c090a09041353555554524f4f4e4946413e3b38343e4b4b443a3523443c404c453d3f4139373d4043415a9b918381373c30060912100d0c0b0c0b0b0b0a0a0a0c0b0c0a03335a5858545054534d454347433d37363d4e584b3d34283e3a494b3f43473d3b43413a3b45909d977a975d353f0f0c241c0d0d0d0d0c0c0c0b0b0b0a";

        bytes memory padded = hasher.pad(input);
        uint padLen = padded.length / 64;
        uint ptrblk = 32;
        bytes32 sprm = hasher.rollup(padded, padLen - ptrblk);
        console.log("This is your sprm: %x", uint256(sprm));

        uint sz = ptrblk * 64;
        bytes memory rem = new bytes(sz);
        for (uint256 i = 0; i < sz; i++) {
            rem[i] = padded[i + padded.length - sz];
        }
        console.log("This is your rem:");
        console.logBytes(rem);

        bytes32 fullHash = hasher.getFullHash(sprm, rem);

        console.log("This is your fullHash: %x", uint256(fullHash));

        // For confirmation, let's compare the fullHash with the expected value.
        bool result = fullHash == sha256(abi.encodePacked(input));
        console.log(
            "The comparison result is(1 means success, 0 means not equal): %d",
            result
        );
        vm.stopBroadcast();
    }
}
